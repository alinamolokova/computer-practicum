# Заданные значения xi и yi
xi = [-1.0, 0.0, 1.0, 2.2, 3.0, 4.0]
yi = [-0.5, 0.0, 0.5, 0.86603, 1.0, 0.86603]

# Построение матрицы дизайна для многочлена первой степени (линейный)
n = len(xi)
sum_xi = sum(xi)
sum_xi_sq = sum(x ** 2 for x in xi)
sum_yi = sum(yi)
sum_xiyi = sum(xi[i] * yi[i] for i in range(n))

A1 = [[n, sum_xi], [sum_xi, sum_xi_sq]]
B1 = [sum_yi, sum_xiyi]

# Нахождение коэффициентов многочлена первой степени
det_A1 = A1[0][0] * A1[1][1] - A1[0][1] * A1[1][0]
a1 = (B1[0] * A1[1][1] - B1[1] * A1[0][1]) / det_A1
b1 = (A1[0][0] * B1[1] - A1[1][0] * B1[0]) / det_A1

# Построение матрицы дизайна для многочлена второй степени (квадратичный)
sum_xi_cube = sum(x ** 3 for x in xi)
sum_xi_quad = sum(x ** 4 for x in xi)
sum_xi_cubeyi = sum(xi[i] ** 3 * yi[i] for i in range(n))
sum_xi_sqi = sum(xi[i] ** 2 for i in range(n))
sum_xi_fouri = sum(xi[i] ** 4 for i in range(n))

A2 = [[n, sum_xi, sum_xi_sq], [sum_xi, sum_xi_sq, sum_xi_cube], [sum_xi_sq, sum_xi_cube, sum_xi_quad]]
B2 = [sum_yi, sum_xiyi, sum_xi_cubeyi]

# Нахождение коэффициентов многочлена второй степени
det_A2 = A2[0][0] * (A2[1][1] * A2[2][2] - A2[1][2] * A2[2][1]) - A2[0][1] * (A2[1][0] * A2[2][2] - A2[1][2] * A2[2][0]) + A2[0][2] * (A2[1][0] * A2[2][1] - A2[1][1] * A2[2][0])
a2 = ((B2[0] * (A2[1][1] * A2[2][2] - A2[1][2] * A2[2][1]) - B2[1] * (A2[0][1] * A2[2][2] - A2[0][2] * A2[2][1]) + B2[2] * (A2[0][1] * A2[1][2] - A2[0][2] * A2[1][1])) / det_A2)
b2 = ((A2[0][0] * (B2[1] * A2[2][2] - B2[2] * A2[1][2]) - A2[0][1] * (B2[0] * A2[2][2] - B2[2] * A2[0][2]) + A2[0][2] * (B2[0] * A2[1][2] - B2[1] * A2[0][2])) / det_A2)
c2 = ((A2[0][0] * (A2[1][1] * B2[2] - A2[2][1] * B2[1]) - A2[0][1] * (A2[1][0] * B2[2] - A2[2][0] * B2[1]) + A2[0][2] * (A2[1][0] * B2[1] - A2[2][0] * B2[0])) / det_A2)

print("Коэффициенты для многочлена первой степени:", a1, b1)
print("Коэффициенты для многочлена второй степени:", a2, b2, c2)
